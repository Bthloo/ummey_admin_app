import 'package:cat/core/data_base/my_database.dart';import 'package:cat/core/general_components/ColorHelper.dart';import 'package:cat/core/general_components/build_show_toast.dart';import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:url_launcher/url_launcher.dart';import '../../../../core/data_base/models/admin_cart_model.dart';class OrderDetailsScreen extends StatelessWidget {  const OrderDetailsScreen({super.key});static const routeName = 'order-details-screen';  @override  Widget build(BuildContext context) {    CartAmdinModel argument = ModalRoute.of(context)!.settings.arguments as CartAmdinModel;    return Scaffold(      bottomNavigationBar: Padding(        padding: const EdgeInsets.all(15.0),        child: Row(          mainAxisAlignment: MainAxisAlignment.spaceEvenly,          children: [            SizedBox(              width: 150.w,              child: ElevatedButton(                style: ButtonStyle(                  backgroundColor: WidgetStateProperty.all(ColorHelper.mainColor),                ),                  onPressed: ()async{                    Uri url = Uri(                        scheme: "tel",                        path: argument.userPhone                    );                    try{                        await launchUrl(url);                    } catch (e) {                      buildShowToast("Can't make a call $e");                    }                  },                  child: const Text("Call the Client",                  style: TextStyle(                   color: Colors.white, ),)              ),            ),            SizedBox(              width: 150.w,              child: ElevatedButton(                style: ButtonStyle(                   backgroundColor: WidgetStateProperty.all(ColorHelper.mainColor),                )        ,                  onPressed: (){                    if(argument.status == "Delivered"){                     return;                    }else{                      try{                        if(argument.status == "On Delivery"){                          argument.status = "Delivered";                        }else if(argument.status == "Delivered"){                          argument.status = "Delivered";                        }else if(argument.status == "Pending"){                          argument.status = "On Delivery";                        }                        MyDataBase.editHistory(                            uId: argument.userId,                            cartAdminModel: argument                        );                        MyDataBase.getCartAdminCollection().doc(argument.id).set(                            argument                        );                        buildShowToast("Done Successfully");                        Navigator.pop(context);                      }on Exception catch (e) {                        buildShowToast("Error $e");                      }                    }                  },                  child: Builder(                      builder: (context) {                        if(argument.status == "On Delivery"){                          return const Text("Add to Delivered",                            style: TextStyle(                              color: Colors.white,                            ),);                        }else if(argument.status == "Delivered"){                          return const Text("!",                            style: TextStyle(                              color: Colors.white,                            ),);                        }else if(argument.status == "Pending"){                          return const Text("Add to On Delivery",                            style: TextStyle(                              color: Colors.white,                            ),);                        }else{                          return const Text("!",                            style: TextStyle(                              color: Colors.white,                            ),);                        }                      },                  )              ),            ),          ],        ),      ),      appBar: AppBar(        title: const Text("Order Details"),      ),      body:  Padding(        padding: const EdgeInsets.all(10.0),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            ExpansionTile(            title: Text("Client Details"),              expandedAlignment: Alignment.center,              expandedCrossAxisAlignment: CrossAxisAlignment.start,              children: [                Text("Status: ${argument.status}",style: const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),                Text("Name: ${argument.userName}",style: const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),                Text("Phone number: ${argument.userPhone}",style: const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),                Text("Address: ${argument.userAddress}",style:const TextStyle(                  color: Colors.black,                  fontSize: 25,),),                Text("Is Code used: ${argument.isCodeUsed}",style:const TextStyle(                  color: Colors.black,                  fontSize: 25,),),                Text("Discount Code: ${argument.discountCode}",style:const TextStyle(                  color: Colors.black,                  fontSize: 25,),),                Text("Total Price: ${argument.totalPrice} LE",style:const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),                Text("Order Date: ${argument.time}",style:const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),                Text("Seat: ${argument.seatName}",style: const TextStyle(                  color: Colors.black,                  fontSize: 25,                ),),              ],        ),            const Text("Orders: ",style: TextStyle(              color: Colors.black,              fontWeight: FontWeight.bold,              fontSize: 30,            ),),            Expanded(                child: ListView.separated(                    itemBuilder: (context, index) {                      return Container(                        decoration: BoxDecoration(                            color: Colors.orange,                            borderRadius: BorderRadius.circular(10)                        ),                        child: ListTile(                          onTap: (){                            if(argument.cartModelList?[index].pizzaMaker == null){                              return;                            }else{                              showDialog(                                context: context,                                builder: (context) {                                  return AlertDialog(                                    title: const Text("Show Pizza Maker Details"),                                    content: Text(argument.cartModelList![index].pizzaMaker!),                                    actions: [                                      TextButton(                                        onPressed: () {                                          Navigator.of(context).pop();                                        },                                        child: const Text('Ok'),                                      ),                                    ],                                  );                                },                              );                            }                          },                          title: Text("Name: ${argument.cartModelList?[index].name}",                            style:const TextStyle(                            color: Colors.white,                            fontSize: 25,                          ),),                          subtitle: Text("Price: ${argument.cartModelList?[index].price} LE",                            style:const TextStyle(                            color: Colors.white,                            fontSize: 25,                          ),),                          trailing: Text("X${argument.cartModelList?[index].quantity}.${argument.cartModelList?[index].size}",                            style:const TextStyle(                            color: Colors.white,                            fontSize: 25,                          ),),                        ),                      );                    },                    separatorBuilder: (context, index) {                      return const Divider();                    },                    itemCount: argument.cartModelList?.length??0)            ),          ],        ),      ));  }}